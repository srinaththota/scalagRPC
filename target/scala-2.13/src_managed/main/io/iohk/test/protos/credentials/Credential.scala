// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.iohk.test.protos.credentials

/** @param id
  *   the unique incremental id for the credential (starts at 1)
  * @param issuedOn
  *   a System.currentTimeMillis() when the credential was issued
  * @param subject
  *   the subject's name for this credential
  * @param issuer
  *   the issuer's name emitting this credential
  * @param title
  *   the title on the credential
  */
@SerialVersionUID(0L)
final case class Credential(
    id: _root_.scala.Int = 0,
    issuedOn: _root_.scala.Long = 0L,
    subject: _root_.scala.Predef.String = "",
    issuer: _root_.scala.Predef.String = "",
    title: _root_.scala.Predef.String = ""
    ) extends scalapb.GeneratedMessage with scalapb.Message[Credential] with scalapb.lenses.Updatable[Credential] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = id
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
        }
      };
      
      {
        val __value = issuedOn
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
        }
      };
      
      {
        val __value = subject
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = issuer
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      
      {
        val __value = title
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = id
        if (__v != 0) {
          _output__.writeInt32(1, __v)
        }
      };
      {
        val __v = issuedOn
        if (__v != 0L) {
          _output__.writeInt64(2, __v)
        }
      };
      {
        val __v = subject
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = issuer
        if (__v != "") {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = title
        if (__v != "") {
          _output__.writeString(5, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.iohk.test.protos.credentials.Credential = {
      var __id = this.id
      var __issuedOn = this.issuedOn
      var __subject = this.subject
      var __issuer = this.issuer
      var __title = this.title
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __id = _input__.readInt32()
          case 16 =>
            __issuedOn = _input__.readInt64()
          case 26 =>
            __subject = _input__.readString()
          case 34 =>
            __issuer = _input__.readString()
          case 42 =>
            __title = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      io.iohk.test.protos.credentials.Credential(
          id = __id,
          issuedOn = __issuedOn,
          subject = __subject,
          issuer = __issuer,
          title = __title
      )
    }
    def withId(__v: _root_.scala.Int): Credential = copy(id = __v)
    def withIssuedOn(__v: _root_.scala.Long): Credential = copy(issuedOn = __v)
    def withSubject(__v: _root_.scala.Predef.String): Credential = copy(subject = __v)
    def withIssuer(__v: _root_.scala.Predef.String): Credential = copy(issuer = __v)
    def withTitle(__v: _root_.scala.Predef.String): Credential = copy(title = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = id
          if (__t != 0) __t else null
        }
        case 2 => {
          val __t = issuedOn
          if (__t != 0L) __t else null
        }
        case 3 => {
          val __t = subject
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = issuer
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = title
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(id)
        case 2 => _root_.scalapb.descriptors.PLong(issuedOn)
        case 3 => _root_.scalapb.descriptors.PString(subject)
        case 4 => _root_.scalapb.descriptors.PString(issuer)
        case 5 => _root_.scalapb.descriptors.PString(title)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = io.iohk.test.protos.credentials.Credential
}

object Credential extends scalapb.GeneratedMessageCompanion[io.iohk.test.protos.credentials.Credential] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.iohk.test.protos.credentials.Credential] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): io.iohk.test.protos.credentials.Credential = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    io.iohk.test.protos.credentials.Credential(
      __fieldsMap.getOrElse(__fields.get(0), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(1), 0L).asInstanceOf[_root_.scala.Long],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(4), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.iohk.test.protos.credentials.Credential] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      io.iohk.test.protos.credentials.Credential(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = CredentialsProto.javaDescriptor.getMessageTypes.get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = CredentialsProto.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.iohk.test.protos.credentials.Credential(
    id = 0,
    issuedOn = 0L,
    subject = "",
    issuer = "",
    title = ""
  )
  implicit class CredentialLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.iohk.test.protos.credentials.Credential]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.iohk.test.protos.credentials.Credential](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def issuedOn: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.issuedOn)((c_, f_) => c_.copy(issuedOn = f_))
    def subject: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.subject)((c_, f_) => c_.copy(subject = f_))
    def issuer: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.issuer)((c_, f_) => c_.copy(issuer = f_))
    def title: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.title)((c_, f_) => c_.copy(title = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val ISSUEDON_FIELD_NUMBER = 2
  final val SUBJECT_FIELD_NUMBER = 3
  final val ISSUER_FIELD_NUMBER = 4
  final val TITLE_FIELD_NUMBER = 5
  def of(
    id: _root_.scala.Int,
    issuedOn: _root_.scala.Long,
    subject: _root_.scala.Predef.String,
    issuer: _root_.scala.Predef.String,
    title: _root_.scala.Predef.String
  ): _root_.io.iohk.test.protos.credentials.Credential = _root_.io.iohk.test.protos.credentials.Credential(
    id,
    issuedOn,
    subject,
    issuer,
    title
  )
}
