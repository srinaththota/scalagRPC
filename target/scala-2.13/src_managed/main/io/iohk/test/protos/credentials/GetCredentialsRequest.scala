// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.iohk.test.protos.credentials

/** Request to get the available credentials for the given user
  *
  * Allowing to paginate by using the last seen credential id, for example, if you already saw
  * credentials 1 and 2, you can set the `after` field to `2`, and you will get only credentials
  * with `id &gt; 2`.
  *
  * The number of results is limited by the `limit` field.
  *
  * @param userId
  *   the user id to request the credentials for (it must be a java.util.UUID)
  * @param limit
  *   the max amount of results to get (optional, defaults to 3)
  * @param after
  *   optional argument to paginate the results
  */
@SerialVersionUID(0L)
final case class GetCredentialsRequest(
    userId: _root_.scala.Predef.String = "",
    limit: _root_.scala.Int = 0,
    after: _root_.scala.Int = 0
    ) extends scalapb.GeneratedMessage with scalapb.Message[GetCredentialsRequest] with scalapb.lenses.Updatable[GetCredentialsRequest] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = userId
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = limit
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
        }
      };
      
      {
        val __value = after
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = userId
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = limit
        if (__v != 0) {
          _output__.writeInt32(2, __v)
        }
      };
      {
        val __v = after
        if (__v != 0) {
          _output__.writeInt32(3, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.iohk.test.protos.credentials.GetCredentialsRequest = {
      var __userId = this.userId
      var __limit = this.limit
      var __after = this.after
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __userId = _input__.readString()
          case 16 =>
            __limit = _input__.readInt32()
          case 24 =>
            __after = _input__.readInt32()
          case tag => _input__.skipField(tag)
        }
      }
      io.iohk.test.protos.credentials.GetCredentialsRequest(
          userId = __userId,
          limit = __limit,
          after = __after
      )
    }
    def withUserId(__v: _root_.scala.Predef.String): GetCredentialsRequest = copy(userId = __v)
    def withLimit(__v: _root_.scala.Int): GetCredentialsRequest = copy(limit = __v)
    def withAfter(__v: _root_.scala.Int): GetCredentialsRequest = copy(after = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = userId
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = limit
          if (__t != 0) __t else null
        }
        case 3 => {
          val __t = after
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(userId)
        case 2 => _root_.scalapb.descriptors.PInt(limit)
        case 3 => _root_.scalapb.descriptors.PInt(after)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = io.iohk.test.protos.credentials.GetCredentialsRequest
}

object GetCredentialsRequest extends scalapb.GeneratedMessageCompanion[io.iohk.test.protos.credentials.GetCredentialsRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.iohk.test.protos.credentials.GetCredentialsRequest] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): io.iohk.test.protos.credentials.GetCredentialsRequest = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    io.iohk.test.protos.credentials.GetCredentialsRequest(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(2), 0).asInstanceOf[_root_.scala.Int]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.iohk.test.protos.credentials.GetCredentialsRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      io.iohk.test.protos.credentials.GetCredentialsRequest(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = CredentialsProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = CredentialsProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.iohk.test.protos.credentials.GetCredentialsRequest(
    userId = "",
    limit = 0,
    after = 0
  )
  implicit class GetCredentialsRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.iohk.test.protos.credentials.GetCredentialsRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.iohk.test.protos.credentials.GetCredentialsRequest](_l) {
    def userId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.userId)((c_, f_) => c_.copy(userId = f_))
    def limit: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.limit)((c_, f_) => c_.copy(limit = f_))
    def after: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.after)((c_, f_) => c_.copy(after = f_))
  }
  final val USERID_FIELD_NUMBER = 1
  final val LIMIT_FIELD_NUMBER = 2
  final val AFTER_FIELD_NUMBER = 3
  def of(
    userId: _root_.scala.Predef.String,
    limit: _root_.scala.Int,
    after: _root_.scala.Int
  ): _root_.io.iohk.test.protos.credentials.GetCredentialsRequest = _root_.io.iohk.test.protos.credentials.GetCredentialsRequest(
    userId,
    limit,
    after
  )
}
